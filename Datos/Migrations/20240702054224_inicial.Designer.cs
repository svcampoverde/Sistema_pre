// <auto-generated />
using System;
using Datos.AplicationDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datos.Migrations
{
    [DbContext(typeof(SistemapContext))]
    [Migration("20240702054224_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Datos.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("banco");
                });

            modelBuilder.Entity("Datos.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoria");
                });

            modelBuilder.Entity("Datos.Models.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdProvincia")
                        .HasColumnName("id_provincia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_ciudad");

                    b.HasIndex("IdProvincia");

                    b.ToTable("ciudad");
                });

            modelBuilder.Entity("Datos.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<int>("CiudadId")
                        .HasColumnName("idCiudad")
                        .HasColumnType("int");

                    b.Property<int?>("CiudadId1")
                        .HasColumnType("int");

                    b.Property<string>("ContactoCorreo")
                        .HasColumnName("contacto_correo")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactoTelefono")
                        .HasColumnName("contacto_telefono")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CuentaId")
                        .HasColumnName("idCuenta")
                        .HasColumnType("int");

                    b.Property<int?>("CuentaId1")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("EmpresaId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnName("fecha_registro")
                        .HasColumnType("datetime");

                    b.Property<int>("FormaPagoId")
                        .HasColumnName("idFormapago")
                        .HasColumnType("int");

                    b.Property<int?>("FormaPagoId1")
                        .HasColumnType("int");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnName("limite_credito")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PersonaId")
                        .HasColumnName("idPersona")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaId1")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CiudadId");

                    b.HasIndex("CiudadId1");

                    b.HasIndex("CuentaId");

                    b.HasIndex("CuentaId1");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EmpresaId1");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("FormaPagoId1");

                    b.HasIndex("PersonaId");

                    b.HasIndex("PersonaId1");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("Datos.Models.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnType("datetime");

                    b.Property<int>("IdBanco")
                        .HasColumnName("idBanco")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoCuenta")
                        .HasColumnName("idTipocuenta")
                        .HasColumnType("int");

                    b.Property<string>("NumCuenta")
                        .IsRequired()
                        .HasColumnName("numcuenta")
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdBanco");

                    b.HasIndex("IdTipoCuenta");

                    b.ToTable("cuenta");
                });

            modelBuilder.Entity("Datos.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnName("empresa")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaContrato")
                        .HasColumnName("fecha_contrato")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCiudad")
                        .HasColumnName("idCiudad")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnName("idPersona")
                        .HasColumnType("int");

                    b.Property<float>("Sueldo")
                        .HasColumnName("sueldo")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdPersona");

                    b.ToTable("empleado");
                });

            modelBuilder.Entity("Datos.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .HasColumnName("correo")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdTipoEmpresa")
                        .HasColumnName("idTipoEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdTipoEmpresa");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("Datos.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Artista")
                        .HasColumnName("artista")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnName("fecha_evento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Promotor")
                        .HasColumnName("promotor")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_evento");

                    b.HasIndex("IdCiudad");

                    b.ToTable("evento");
                });

            modelBuilder.Entity("Datos.Models.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormaPago");
                });

            modelBuilder.Entity("Datos.Models.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId")
                        .IsUnique();

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("Datos.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnName("cedula")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CiudadId")
                        .HasColumnName("idCiudad")
                        .HasColumnType("int");

                    b.Property<int?>("CiudadId1")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnName("correo")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .HasColumnName("direccion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<string>("Genero")
                        .HasColumnName("genero")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasColumnName("telefono")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CiudadId");

                    b.HasIndex("CiudadId1");

                    b.ToTable("persona");
                });

            modelBuilder.Entity("Datos.Models.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<int>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("Descuento")
                        .HasColumnName("descuento")
                        .HasColumnType("float");

                    b.Property<int?>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCotizacion")
                        .HasColumnName("fecha_cotizacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnName("fecha_evento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEvento")
                        .HasColumnName("idevento")
                        .HasColumnType("int");

                    b.Property<float>("Iva")
                        .HasColumnName("iva")
                        .HasColumnType("float");

                    b.Property<float>("Total")
                        .HasColumnName("total")
                        .HasColumnType("float");

                    b.Property<float>("Version")
                        .HasColumnName("version")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EventoId");

                    b.HasIndex("IdEvento");

                    b.ToTable("presupuesto");
                });

            modelBuilder.Entity("Datos.Models.PresupuestoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPresupuesto")
                        .HasColumnName("idPresupuesto")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdServicio")
                        .HasColumnName("idServicio")
                        .HasColumnType("int");

                    b.Property<string>("Servicio")
                        .HasColumnName("servicio")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdPresupuesto");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdServicio");

                    b.ToTable("presupuesto_detalle");
                });

            modelBuilder.Entity("Datos.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCategoria")
                        .HasColumnName("idCategoria")
                        .HasColumnType("int");

                    b.Property<float>("Precio")
                        .HasColumnName("precio")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("IdCategoria");

                    b.ToTable("producto");
                });

            modelBuilder.Entity("Datos.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnName("empresa")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCiudad")
                        .HasColumnName("idCiudad")
                        .HasColumnType("int");

                    b.Property<int>("IdCuenta")
                        .HasColumnName("idCuenta")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idempresa")
                        .HasColumnType("int");

                    b.Property<int>("IdFormaPago")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnName("idPersona")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnName("idervicio")
                        .HasColumnType("int");

                    b.Property<string>("TipoServicio")
                        .HasColumnName("tiposervicio")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdFormaPago");

                    b.HasIndex("IdPersona");

                    b.HasIndex("ServicioId");

                    b.ToTable("proveedor");
                });

            modelBuilder.Entity("Datos.Models.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("provincias");
                });

            modelBuilder.Entity("Datos.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_rol");

                    b.ToTable("rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = 1ul,
                            Codigo = "ADM",
                            Descripcion = "Administrador",
                            FechaCreacionUTC = new DateTime(2024, 7, 2, 5, 42, 23, 253, DateTimeKind.Utc).AddTicks(1178),
                            FechaModificacionUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Activo = 1ul,
                            Codigo = "USEST",
                            Descripcion = "Usuario Estándar",
                            FechaCreacionUTC = new DateTime(2024, 7, 2, 5, 42, 23, 253, DateTimeKind.Utc).AddTicks(1178),
                            FechaModificacionUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Datos.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdTipoServicio")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdTipoServicio");

                    b.ToTable("servicio");
                });

            modelBuilder.Entity("Datos.Models.TipoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipocuenta");
                });

            modelBuilder.Entity("Datos.Models.TipoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipoempresa");
                });

            modelBuilder.Entity("Datos.Models.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .HasColumnName("descripcion")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_servicio");
                });

            modelBuilder.Entity("Datos.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("Activo")
                        .HasColumnName("activo")
                        .HasColumnType("bit");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnName("contrasena")
                        .HasColumnType("text");

                    b.Property<byte[]>("ContrasenaHash")
                        .HasColumnName("contrasena_hash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime>("FechaCreacionUTC")
                        .HasColumnName("fecha_creacion_utc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacionUTC")
                        .HasColumnName("fecha_modificacion_utc")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnName("nombre_usuario")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RolId")
                        .HasColumnName("rol_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdPersona")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Datos.Models.Ciudad", b =>
                {
                    b.HasOne("Datos.Models.Provincia", "ProvinciaNavigation")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("FK_ciudad_provincia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Cliente", b =>
                {
                    b.HasOne("Datos.Models.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .HasConstraintName("cliente_ciudadfk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Ciudad", null)
                        .WithMany("Clientes")
                        .HasForeignKey("CiudadId1");

                    b.HasOne("Datos.Models.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .HasConstraintName("cliente_cuentafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Cuenta", null)
                        .WithMany("Clientes")
                        .HasForeignKey("CuentaId1");

                    b.HasOne("Datos.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("cliente_empresafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Empresa", null)
                        .WithMany("Clientes")
                        .HasForeignKey("EmpresaId1");

                    b.HasOne("Datos.Models.FormaPago", "FormaPago")
                        .WithMany()
                        .HasForeignKey("FormaPagoId")
                        .HasConstraintName("cliente_formapagofk")
                        .IsRequired();

                    b.HasOne("Datos.Models.FormaPago", null)
                        .WithMany("Clientes")
                        .HasForeignKey("FormaPagoId1");

                    b.HasOne("Datos.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("cliente_personafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Persona", null)
                        .WithMany("Clientes")
                        .HasForeignKey("PersonaId1");
                });

            modelBuilder.Entity("Datos.Models.Cuenta", b =>
                {
                    b.HasOne("Datos.Models.Banco", "IdBancoNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdBanco")
                        .HasConstraintName("banco_cuentafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.TipoCuenta", "IdTipoCuentaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdTipoCuenta")
                        .HasConstraintName("tipocuenta_cuentafk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Empleado", b =>
                {
                    b.HasOne("Datos.Models.Ciudad", "IdCiudadNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("empleado_ciudadfk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("empleado_personafk")
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Empresa", b =>
                {
                    b.HasOne("Datos.Models.TipoEmpresa", "IdTipoEmpresaNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("IdTipoEmpresa")
                        .HasConstraintName("tipoempresa_empresafk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Evento", b =>
                {
                    b.HasOne("Datos.Models.Ciudad", "CiudadNavegation")
                        .WithMany("Eventos")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("FK_evento_ciudad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Inventario", b =>
                {
                    b.HasOne("Datos.Models.Producto", "Producto")
                        .WithOne("Inventario")
                        .HasForeignKey("Datos.Models.Inventario", "ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Persona", b =>
                {
                    b.HasOne("Datos.Models.Ciudad", "CiudadNavegation")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .HasConstraintName("persona_ciudadfk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Ciudad", null)
                        .WithMany("Personas")
                        .HasForeignKey("CiudadId1");
                });

            modelBuilder.Entity("Datos.Models.Presupuesto", b =>
                {
                    b.HasOne("Datos.Models.Evento", null)
                        .WithMany("PresupuestoNavegation")
                        .HasForeignKey("EventoId");

                    b.HasOne("Datos.Models.Evento", "IdeventoNavigation")
                        .WithMany()
                        .HasForeignKey("IdEvento")
                        .HasConstraintName("presupuesto_eventofk")
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.PresupuestoDetalle", b =>
                {
                    b.HasOne("Datos.Models.Presupuesto", "IdPresupuestoNavigation")
                        .WithMany("PresupuestoDetalles")
                        .HasForeignKey("IdPresupuesto")
                        .HasConstraintName("presupuesto_detalle_presupuestofk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Producto", "IdproductoNavigation")
                        .WithMany("PresupuestoDetalles")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("presupuesto_detalle_productofk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Servicio", "IdservicioNavigation")
                        .WithMany("PresupuestoDetalles")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("servicio_presupuestodetallefk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Producto", b =>
                {
                    b.HasOne("Datos.Models.Categoria", null)
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Datos.Models.Categoria", "IdCategoriaNavigation")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("producto_categoriafk")
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Proveedor", b =>
                {
                    b.HasOne("Datos.Models.Ciudad", "IdCiudadNavigation")
                        .WithMany("Proveedors")
                        .HasForeignKey("IdCiudad")
                        .HasConstraintName("proveedor_ciudadfk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Cuenta", "IdCuentaNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdCuenta")
                        .HasConstraintName("proveedor_cuentafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("proveedor_empresafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.FormaPago", "FormaPago")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdFormaPago")
                        .HasConstraintName("proveedor_IdFormaPagofk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("proveedor_personafk")
                        .IsRequired();

                    b.HasOne("Datos.Models.Servicio", "IdServicioNavigation")
                        .WithMany("Proveedores")
                        .HasForeignKey("ServicioId")
                        .HasConstraintName("servicio_proveedorfk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Servicio", b =>
                {
                    b.HasOne("Datos.Models.TipoServicio", "TipoServicio")
                        .WithMany("Servicios")
                        .HasForeignKey("IdTipoServicio")
                        .HasConstraintName("servicio_tipo_servicio_fk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Datos.Models.Usuario", b =>
                {
                    b.HasOne("Datos.Models.Persona", "Persona")
                        .WithOne("UsuarioNavegation")
                        .HasForeignKey("Datos.Models.Usuario", "IdPersona")
                        .HasConstraintName("usuario_persona_fk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Datos.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .HasConstraintName("usuario_rol_fk")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
